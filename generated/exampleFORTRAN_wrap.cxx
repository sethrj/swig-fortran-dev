/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#ifndef SWIGEXTERN
#ifdef __cplusplus
#define SWIGEXTERN extern
#else
#define SWIGEXTERN
#endif
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




// Default exception handler
#define SWIG_exception_impl(CODE, MSG, NULLRETURN) \
    throw std::logic_error(MSG); return NULLRETURN;


/* Contract support */
#define SWIG_contract_assert(NULLRETURN, EXPR, MSG) \
    if (!(EXPR)) { SWIG_exception_impl(SWIG_ValueError, MSG, NULLRETURN); }


#undef SWIG_exception_impl
#define SWIG_exception_impl(CODE, MSG, NULLRETURN) \
    swig::fortran_store_exception(CODE, MSG); return NULLRETURN;


#define SWIGVERSION 0x040000 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


#include "example.hh"


extern "C" {
extern int ierr;
extern char serr[1024];
}


#include <string>


#include <algorithm>


namespace swig
{
// Stored exception message
std::string fortran_last_exception_msg;

// Call this function before any new action
void fortran_check_unhandled_exception()
{
    if (::ierr != 0)
    {
        throw std::runtime_error(
                "An unhandled exception occurred in $symname: "
                + fortran_last_exception_msg);
    }
}

// Save an exception to the fortran error code and string
void fortran_store_exception(int code, const char *msg)
{
    ::ierr = code;

    // Save the message to a std::string first
    fortran_last_exception_msg = msg;

    std::size_t msg_size = std::min<std::size_t>(
            fortran_last_exception_msg.size(),
            1024);

    // Copy to space-padded Fortran string
    char* dst = serr;
    dst = std::copy(fortran_last_exception_msg.begin(),
                    fortran_last_exception_msg.begin() + msg_size,
                    dst);
    std::fill(dst, serr + 1024, ' ');
}
} // end namespace swig

#ifdef __cplusplus
extern "C" {
#endif
SWIGEXPORT void swigc_set_Shape_nshapes(int const *farg1) {
  int arg1 ;
  
  arg1 = *farg1;
  Shape::nshapes = arg1;
  
}


SWIGEXPORT int swigc_get_Shape_nshapes() {
  int fresult ;
  int result;
  
  result = (int)Shape::nshapes;
  fresult = result;
  return fresult;
}


SWIGEXPORT void swigc_set_Shape_x(void *farg1, double const *farg2) {
  Shape *arg1 = (Shape *) 0 ;
  double arg2 ;
  
  arg1 = static_cast< Shape * >(farg1);
  arg2 = *farg2;
  if (arg1) (arg1)->x = arg2;
  
}


SWIGEXPORT double swigc_get_Shape_x(void *farg1) {
  double fresult ;
  Shape *arg1 = (Shape *) 0 ;
  double result;
  
  arg1 = static_cast< Shape * >(farg1);
  result = (double) ((arg1)->x);
  fresult = result;
  return fresult;
}


SWIGEXPORT void swigc_set_Shape_y(void *farg1, double const *farg2) {
  Shape *arg1 = (Shape *) 0 ;
  double arg2 ;
  
  arg1 = static_cast< Shape * >(farg1);
  arg2 = *farg2;
  if (arg1) (arg1)->y = arg2;
  
}


SWIGEXPORT double swigc_get_Shape_y(void *farg1) {
  double fresult ;
  Shape *arg1 = (Shape *) 0 ;
  double result;
  
  arg1 = static_cast< Shape * >(farg1);
  result = (double) ((arg1)->y);
  fresult = result;
  return fresult;
}


SWIGEXPORT void swigc_delete_Shape(void *farg1) {
  Shape *arg1 = (Shape *) 0 ;
  
  arg1 = static_cast< Shape * >(farg1);
  {
    try {
      delete arg1;
    }
    catch (const std::exception& e)
    {
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
  }
  
}


SWIGEXPORT void swigc_Shape_move(void *farg1, double const *farg2, double const *farg3) {
  Shape *arg1 = (Shape *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = static_cast< Shape * >(farg1);
  arg2 = *farg2;
  arg3 = *farg3;
  {
    try {
      (arg1)->move(arg2,arg3);
    }
    catch (const std::exception& e)
    {
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
  }
  
}


SWIGEXPORT double swigc_Shape_area(void const *farg1) {
  double fresult ;
  Shape *arg1 = (Shape *) 0 ;
  double result;
  
  arg1 = static_cast< Shape * >(const_cast< void* >(farg1));
  {
    try {
      result = (double)((Shape const *)arg1)->area();
    }
    catch (const std::exception& e)
    {
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT double swigc_Shape_perimeter(void const *farg1) {
  double fresult ;
  Shape *arg1 = (Shape *) 0 ;
  double result;
  
  arg1 = static_cast< Shape * >(const_cast< void* >(farg1));
  {
    try {
      result = (double)((Shape const *)arg1)->perimeter();
    }
    catch (const std::exception& e)
    {
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void * swigc_new_Circle(double const *farg1) {
  void * fresult ;
  double arg1 ;
  Circle *result = 0 ;
  
  arg1 = *farg1;
  {
    try {
      result = (Circle *)new Circle(arg1);
    }
    catch (const std::exception& e)
    {
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT double swigc_Circle_area(void const *farg1) {
  double fresult ;
  Circle *arg1 = (Circle *) 0 ;
  double result;
  
  arg1 = static_cast< Circle * >(const_cast< void* >(farg1));
  {
    try {
      result = (double)((Circle const *)arg1)->area();
    }
    catch (const std::exception& e)
    {
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT double swigc_Circle_perimeter(void const *farg1) {
  double fresult ;
  Circle *arg1 = (Circle *) 0 ;
  double result;
  
  arg1 = static_cast< Circle * >(const_cast< void* >(farg1));
  {
    try {
      result = (double)((Circle const *)arg1)->perimeter();
    }
    catch (const std::exception& e)
    {
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void swigc_delete_Circle(void *farg1) {
  Circle *arg1 = (Circle *) 0 ;
  
  arg1 = static_cast< Circle * >(farg1);
  {
    try {
      delete arg1;
    }
    catch (const std::exception& e)
    {
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
  }
  
}


SWIGEXPORT void * swigc_new_Square(double const *farg1) {
  void * fresult ;
  double arg1 ;
  Square *result = 0 ;
  
  arg1 = *farg1;
  {
    try {
      result = (Square *)new Square(arg1);
    }
    catch (const std::exception& e)
    {
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT double swigc_Square_area(void const *farg1) {
  double fresult ;
  Square *arg1 = (Square *) 0 ;
  double result;
  
  arg1 = static_cast< Square * >(const_cast< void* >(farg1));
  {
    try {
      result = (double)((Square const *)arg1)->area();
    }
    catch (const std::exception& e)
    {
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT double swigc_Square_perimeter(void const *farg1) {
  double fresult ;
  Square *arg1 = (Square *) 0 ;
  double result;
  
  arg1 = static_cast< Square * >(const_cast< void* >(farg1));
  {
    try {
      result = (double)((Square const *)arg1)->perimeter();
    }
    catch (const std::exception& e)
    {
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void swigc_delete_Square(void *farg1) {
  Square *arg1 = (Square *) 0 ;
  
  arg1 = static_cast< Square * >(farg1);
  {
    try {
      delete arg1;
    }
    catch (const std::exception& e)
    {
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
  }
  
}


SWIGEXPORT void * swigc_new_Sphere(double const *farg1) {
  void * fresult ;
  double arg1 ;
  Sphere *result = 0 ;
  
  arg1 = *farg1;
  {
    try {
      result = (Sphere *)new Sphere(arg1);
    }
    catch (const std::exception& e)
    {
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT double swigc_Sphere_volume(void const *farg1) {
  double fresult ;
  Sphere *arg1 = (Sphere *) 0 ;
  double result;
  
  arg1 = static_cast< Sphere * >(const_cast< void* >(farg1));
  {
    try {
      result = (double)((Sphere const *)arg1)->volume();
    }
    catch (const std::exception& e)
    {
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void swigc_delete_Sphere(void *farg1) {
  Sphere *arg1 = (Sphere *) 0 ;
  
  arg1 = static_cast< Sphere * >(farg1);
  {
    try {
      delete arg1;
    }
    catch (const std::exception& e)
    {
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
  }
  
}


SWIGEXPORT double swigc_surface_to_volume(void const *farg1) {
  double fresult ;
  Shape *arg1 = 0 ;
  double result;
  
  arg1 = static_cast< Shape * >(const_cast< void* >(farg1));
  {
    try {
      result = (double)surface_to_volume((Shape const &)*arg1);
    }
    catch (const std::exception& e)
    {
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
  }
  fresult = result;
  return fresult;
}


#ifdef __cplusplus
}
#endif

