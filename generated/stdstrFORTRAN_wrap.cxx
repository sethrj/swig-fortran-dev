/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#ifndef SWIGEXTERN
#ifdef __cplusplus
#define SWIGEXTERN extern
#else
#define SWIGEXTERN
#endif
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




// Default exception handler
#define SWIG_exception_impl(CODE, MSG, RETURNNULL) \
    throw std::logic_error(MSG); RETURNNULL;


/* Contract support */
#define SWIG_contract_assert(RETURNNULL, EXPR, MSG) \
    if (!(EXPR)) { SWIG_exception_impl(SWIG_ValueError, MSG, RETURNNULL); }


#define SWIG_check_mutable(SWIG_CLASS_WRAPPER, TYPENAME, FNAME, FUNCNAME, RETURNNULL) \
    if ((SWIG_CLASS_WRAPPER).mem == SWIG_CREF) { \
        SWIG_exception_impl(SWIG_TypeError, \
            "Cannot pass const " TYPENAME " (class " FNAME ") " \
            "to a function (" FUNCNAME ") that requires a mutable reference", \
            RETURNNULL); \
    }


#define SWIG_check_nonnull(SWIG_CLASS_WRAPPER, TYPENAME, FNAME, FUNCNAME, RETURNNULL) \
    if ((SWIG_CLASS_WRAPPER).mem == SWIG_NULL) { \
        SWIG_exception_impl(SWIG_TypeError, \
            "Cannot pass null " TYPENAME " (class " FNAME ") " \
            "to function (" FUNCNAME ")", RETURNNULL); \
    }


#define SWIG_check_mutable_nonnull(SWIG_CLASS_WRAPPER, TYPENAME, FNAME, FUNCNAME, RETURNNULL) \
    SWIG_check_nonnull(SWIG_CLASS_WRAPPER, TYPENAME, FNAME, FUNCNAME, RETURNNULL); \
    SWIG_check_mutable(SWIG_CLASS_WRAPPER, TYPENAME, FNAME, FUNCNAME, RETURNNULL);



#if __cplusplus >= 201103L
#define SWIG_assign(LEFTTYPE, LEFT, RIGHTTYPE, RIGHT, FLAGS) \
    SWIG_assign_impl<LEFTTYPE , RIGHTTYPE, swig::assignment_flags<LEFTTYPE >() >( \
            LEFT, RIGHT);
#else
#define SWIG_assign(LEFTTYPE, LEFT, RIGHTTYPE, RIGHT, FLAGS) \
    SWIG_assign_impl<LEFTTYPE , RIGHTTYPE, FLAGS >(LEFT, RIGHT);
#endif



#define SWIGVERSION 0x040000 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


#include "stdstr.hh"


#include <utility>


#include <stdexcept>
#include <algorithm>
#include <sstream>


#include <string>


enum SwigMemState {
    SWIG_NULL = 0,
    SWIG_OWN,
    SWIG_MOVE,
    SWIG_REF,
    SWIG_CREF
};


struct SwigClassWrapper
{
    void* ptr;
    SwigMemState mem;
};

SWIGINTERN SwigClassWrapper SwigClassWrapper_uninitialized()
{
    SwigClassWrapper result;
    result.ptr = NULL;
    result.mem = SWIG_NULL;
    return result;
}


struct SwigArrayWrapper
{
    void* data;
    std::size_t size;
};

SWIGINTERN SwigArrayWrapper SwigArrayWrapper_uninitialized()
{
    SwigArrayWrapper result;
    result.data = NULL;
    result.size = 0;
    return result;
}

SWIGINTERN std::string const &std_string_str(std::string *self){
        return *self;
    }
SWIGINTERN void std_string_assign_from(std::string *self,std::pair< char const *,std::size_t > view){
        self->assign(view.first, view.first + view.second);
    }
SWIGINTERN std::pair< char const *,std::size_t > std_string_view(std::string *self){
        if (self->empty())
            return {nullptr, 0};
        return {self->data(), self->size()};
    }
SWIGINTERN void std_string_copy_to(std::string *self,std::pair< char *,std::size_t > view){
        if (view.second < self->size())
        {
            std::ostringstream os;
            os << "String size too small: " << view.second
                << " < " << self->size();
            throw std::range_error(os.str());
        }

        char* s = view.first;
        s = std::copy(self->begin(), self->end(), s);
        std::fill_n(s, view.second - self->size(), ' ');
    }

namespace swig {

enum AssignmentFlags {
  IS_DESTR       = 0x01,
  IS_COPY_CONSTR = 0x02,
  IS_COPY_ASSIGN = 0x04,
  IS_MOVE_CONSTR = 0x08,
  IS_MOVE_ASSIGN = 0x10
};

// Define our own switching struct to support pre-c++11 builds
template<bool Val>
struct bool_constant {};
typedef bool_constant<true>  true_type;
typedef bool_constant<false> false_type;

// Deletion
template<class T>
SWIGINTERN void destruct_impl(T* self, true_type) {
  delete self;
}
template<class T>
SWIGINTERN T* destruct_impl(T* , false_type) {
  SWIG_exception_impl(SWIG_TypeError,
                      "Invalid assignment: class type has no destructor",
                      return NULL);
}

// Copy construction and assignment
template<class T, class U>
SWIGINTERN T* copy_construct_impl(const U* other, true_type) {
  return new T(*other);
}
template<class T, class U>
SWIGINTERN void copy_assign_impl(T* self, const U* other, true_type) {
  *self = *other;
}

// Disabled construction and assignment
template<class T, class U>
SWIGINTERN T* copy_construct_impl(const U* , false_type) {
  SWIG_exception_impl(SWIG_TypeError,
                      "Invalid assignment: class type has no copy constructor",
                      return NULL);
}
template<class T, class U>
SWIGINTERN void copy_assign_impl(T* , const U* , false_type) {
  SWIG_exception_impl(SWIG_TypeError,
                      "Invalid assignment: class type has no copy assignment",
                      return);
}

#if __cplusplus >= 201103L
#include <utility>
#include <type_traits>

// Move construction and assignment
template<class T, class U>
SWIGINTERN T* move_construct_impl(U* other, true_type) {
  return new T(std::move(*other));
}
template<class T, class U>
SWIGINTERN void move_assign_impl(T* self, U* other, true_type) {
  *self = std::move(*other);
}

// Disabled move construction and assignment
template<class T, class U>
SWIGINTERN T* move_construct_impl(U*, false_type) {
  SWIG_exception_impl(SWIG_TypeError,
                      "Invalid assignment: class type has no move constructor",
                      return NULL);
}
template<class T, class U>
SWIGINTERN void move_assign_impl(T*, U*, false_type) {
  SWIG_exception_impl(SWIG_TypeError,
                      "Invalid assignment: class type has no move assignment",
                      return);
}

template<class T>
constexpr int assignment_flags() {
  return   (std::is_destructible<T>::value       ? IS_DESTR       : 0)
         | (std::is_copy_constructible<T>::value ? IS_COPY_CONSTR : 0)
         | (std::is_copy_assignable<T>::value    ? IS_COPY_ASSIGN : 0)
         | (std::is_move_constructible<T>::value ? IS_MOVE_CONSTR : 0)
         | (std::is_move_assignable<T>::value    ? IS_MOVE_ASSIGN : 0);
}
#endif

template<class T, int Flags>
struct AssignmentTraits
{
  static void destruct(T* self)
  {
    destruct_impl<T>(self, bool_constant<Flags & IS_DESTR>());
  }

  template<class U>
  static T* copy_construct(const U* other)
  {
    return copy_construct_impl<T,U>(other, bool_constant<bool(Flags & IS_COPY_CONSTR)>());
  }

  template<class U>
  static void copy_assign(T* self, const U* other)
  {
    copy_assign_impl<T,U>(self, other, bool_constant<bool(Flags & IS_COPY_ASSIGN)>());
  }

#if __cplusplus >= 201103L
  template<class U>
  static T* move_construct(U* other)
  {
    return move_construct_impl<T,U>(other, bool_constant<bool(Flags & IS_MOVE_CONSTR)>());
  }
  template<class U>
  static void move_assign(T* self, U* other)
  {
    move_assign_impl<T,U>(self, other, bool_constant<bool(Flags & IS_MOVE_ASSIGN)>());
  }
#else
  template<class U>
  static T* move_construct(U* other)
  {
    return copy_construct_impl<T,U>(other, bool_constant<bool(Flags & IS_COPY_CONSTR)>());
  }
  template<class U>
  static void move_assign(T* self, U* other)
  {
    copy_assign_impl<T,U>(self, other, bool_constant<bool(Flags & IS_COPY_ASSIGN)>());
  }
#endif
};

} // end namespace swig



template<class T1, class T2, int AFlags>
SWIGINTERN void SWIG_assign_impl(SwigClassWrapper* self, SwigClassWrapper* other) {
  typedef swig::AssignmentTraits<T1, AFlags> Traits_t;
  T1* pself  = static_cast<T1*>(self->ptr);
  T2* pother = static_cast<T2*>(other->ptr);

  switch (self->mem) {
    case SWIG_NULL:
      /* LHS is unassigned */
      switch (other->mem) {
        case SWIG_NULL: /* null op */ break;
        case SWIG_MOVE: /* capture pointer from RHS */
          self->ptr = other->ptr;
          other->ptr = NULL;
          self->mem = SWIG_OWN;
          other->mem = SWIG_NULL;
          break;
        case SWIG_OWN: /* copy from RHS */
          self->ptr = Traits_t::copy_construct(pother);
          self->mem = SWIG_OWN;
          break;
        case SWIG_REF: /* pointer to RHS */
        case SWIG_CREF:
          self->ptr = other->ptr;
          self->mem = other->mem;
          break;
      }
      break;
    case SWIG_OWN:
      /* LHS owns memory */
      switch (other->mem) {
        case SWIG_NULL:
          /* Delete LHS */
          Traits_t::destruct(pself);
          self->ptr = NULL;
          self->mem = SWIG_NULL;
          break;
        case SWIG_MOVE:
          /* Move RHS into LHS; delete RHS */
          Traits_t::move_assign(pself, pother);
          Traits_t::destruct(pother);
          other->ptr = NULL;
          other->mem = SWIG_NULL;
          break;
        case SWIG_OWN:
        case SWIG_REF:
        case SWIG_CREF:
          /* Copy RHS to LHS */
          Traits_t::copy_assign(pself, pother);
          break;
      }
      break;
    case SWIG_MOVE:
      SWIG_exception_impl(SWIG_RuntimeError,
        "Left-hand side of assignment should never be in a 'MOVE' state",
        return);
      break;
    case SWIG_REF:
      /* LHS is a reference */
      switch (other->mem) {
        case SWIG_NULL:
          /* Remove LHS reference */
          self->ptr = NULL;
          self->mem = SWIG_NULL;
          break;
        case SWIG_MOVE:
          /* Move RHS into LHS; delete RHS. The original ownership stays the
           * same. */
          Traits_t::move_assign(pself, pother);
          Traits_t::destruct(pother);
          other->ptr = NULL;
          other->mem = SWIG_NULL;
          break;
        case SWIG_OWN:
        case SWIG_REF:
        case SWIG_CREF:
          /* Copy RHS to LHS */
          Traits_t::copy_assign(pself, pother);
          break;
      }
    case SWIG_CREF:
      switch (other->mem) {
        case SWIG_NULL:
          /* Remove LHS reference */
          self->ptr = NULL;
          self->mem = SWIG_NULL;
        default:
          SWIG_exception_impl(SWIG_RuntimeError,
              "Cannot assign to a const reference", return);
          break;
      }
  }
}



SWIGINTERN SwigArrayWrapper SWIG_store_string(const std::string& str)
{
    static std::string* temp = NULL;
    SwigArrayWrapper result;
    if (str.empty())
    {
        // Result is empty
        result.data = NULL;
        result.size = 0;
    }
    else
    {
        if (!temp)
        {
            // Allocate a new temporary string
            temp = new std::string(str);
        }
        else
        {
            // Assign the string
            *temp = str;
        }
        result.data = &(*(temp->begin()));
        result.size = temp->size();
    }
    return result;
}

#ifdef __cplusplus
extern "C" {
#endif
SWIGEXPORT SwigClassWrapper swigc_new_string() {
  SwigClassWrapper fresult ;
  std::string *result = 0 ;
  
  result = (std::string *)new std::string();
  fresult.ptr = result;
  fresult.mem = (1 ? SWIG_MOVE : SWIG_REF);
  return fresult;
}


SWIGEXPORT void swigc_string_resize(SwigClassWrapper const *farg1, unsigned long const *farg2) {
  std::string *arg1 = (std::string *) 0 ;
  std::string::size_type arg2 ;
  
  SWIG_check_mutable_nonnull(*farg1, "std::string *", "string", "std::string::resize(std::string::size_type)", return );
  arg1 = static_cast< std::string * >(farg1->ptr);
  arg2 = *farg2;
  (arg1)->resize(arg2);
  
}


SWIGEXPORT void swigc_string_clear(SwigClassWrapper const *farg1) {
  std::string *arg1 = (std::string *) 0 ;
  
  SWIG_check_mutable_nonnull(*farg1, "std::string *", "string", "std::string::clear()", return );
  arg1 = static_cast< std::string * >(farg1->ptr);
  (arg1)->clear();
  
}


SWIGEXPORT unsigned long swigc_string_size(SwigClassWrapper const *farg1) {
  unsigned long fresult ;
  std::string *arg1 = (std::string *) 0 ;
  std::string::size_type result;
  
  SWIG_check_nonnull(*farg1, "std::string const *", "string", "std::string::size() const", return 0);
  arg1 = static_cast< std::string * >(farg1->ptr);
  result = (std::string::size_type)((std::string const *)arg1)->size();
  fresult = result;
  return fresult;
}


SWIGEXPORT unsigned long swigc_string_length(SwigClassWrapper const *farg1) {
  unsigned long fresult ;
  std::string *arg1 = (std::string *) 0 ;
  std::string::size_type result;
  
  SWIG_check_nonnull(*farg1, "std::string const *", "string", "std::string::length() const", return 0);
  arg1 = static_cast< std::string * >(farg1->ptr);
  result = (std::string::size_type)((std::string const *)arg1)->length();
  fresult = result;
  return fresult;
}


SWIGEXPORT SwigArrayWrapper swigc_string_str(SwigClassWrapper const *farg1) {
  SwigArrayWrapper fresult ;
  std::string *arg1 = (std::string *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_mutable_nonnull(*farg1, "std::string *", "string", "std::string::str()", return SwigArrayWrapper_uninitialized());
  arg1 = static_cast< std::string * >(farg1->ptr);
  result = (std::string *) &std_string_str(arg1);
  fresult.data = (result->empty() ? NULL : &(*result->begin()));
  fresult.size = result->size();
  
  return fresult;
}


SWIGEXPORT void swigc_string_assign_from(SwigClassWrapper const *farg1, SwigArrayWrapper *farg2) {
  std::string *arg1 = (std::string *) 0 ;
  std::pair< char const *,std::size_t > arg2 ;
  
  SWIG_check_mutable_nonnull(*farg1, "std::string *", "string", "std::string::assign_from(std::pair< char const *,std::size_t >)", return );
  arg1 = static_cast< std::string * >(farg1->ptr);
  (&arg2)->first  = static_cast<const char*>(farg2->data);
  (&arg2)->second = farg2->size;
  std_string_assign_from(arg1,arg2);
  
}


SWIGEXPORT SwigArrayWrapper swigc_string_view(SwigClassWrapper const *farg1) {
  SwigArrayWrapper fresult ;
  std::string *arg1 = (std::string *) 0 ;
  std::pair< char const *,std::size_t > result;
  
  SWIG_check_mutable_nonnull(*farg1, "std::string *", "string", "std::string::view()", return SwigArrayWrapper_uninitialized());
  arg1 = static_cast< std::string * >(farg1->ptr);
  result = std_string_view(arg1);
  fresult.data = const_cast<char*>((&result)->first);
  fresult.size = (&result)->second;
  return fresult;
}


SWIGEXPORT void swigc_string_copy_to(SwigClassWrapper const *farg1, SwigArrayWrapper *farg2) {
  std::string *arg1 = (std::string *) 0 ;
  std::pair< char *,std::size_t > arg2 ;
  
  SWIG_check_mutable_nonnull(*farg1, "std::string *", "string", "std::string::copy_to(std::pair< char *,std::size_t >)", return );
  arg1 = static_cast< std::string * >(farg1->ptr);
  (&arg2)->first  = static_cast<char*>(farg2->data);
  (&arg2)->second = farg2->size;
  std_string_copy_to(arg1,arg2);
  
}


SWIGEXPORT void swigc_delete_string(SwigClassWrapper const *farg1) {
  std::string *arg1 = (std::string *) 0 ;
  
  SWIG_check_mutable_nonnull(*farg1, "std::string *", "string", "std::string::~string()", return );
  arg1 = static_cast< std::string * >(farg1->ptr);
  delete arg1;
  
}


SWIGEXPORT void swigc_assignment_string(SwigClassWrapper * self, SwigClassWrapper const * other) {
  typedef std::string swig_lhs_classtype;
  SWIG_assign(swig_lhs_classtype, self,
    swig_lhs_classtype, const_cast<SwigClassWrapper*>(other),
    0 | swig::IS_COPY_CONSTR);
}


SWIGEXPORT void swigc_print_str(SwigClassWrapper const *farg1) {
  std::string *arg1 = 0 ;
  
  SWIG_check_nonnull(*farg1, "std::string const &", "string", "print_str(std::string const &)", return );
  arg1 = static_cast< std::string * >(farg1->ptr);
  print_str((std::string const &)*arg1);
  
}


SWIGEXPORT void swigc_halve_str(SwigClassWrapper const *farg1) {
  std::string *arg1 = 0 ;
  
  SWIG_check_mutable_nonnull(*farg1, "std::string &", "string", "halve_str(std::string &)", return );
  arg1 = static_cast< std::string * >(farg1->ptr);
  halve_str(*arg1);
  
}


SWIGEXPORT SwigArrayWrapper swigc_get_reversed_native_string(SwigArrayWrapper *farg1) {
  SwigArrayWrapper fresult ;
  std::string *arg1 = 0 ;
  std::string tempstr1 ;
  std::string result;
  
  tempstr1 = std::string(static_cast<const char*>(farg1->data), farg1->size);
  arg1 = &tempstr1;
  
  result = get_reversed_native_string((std::string const &)*arg1);
  
  fresult = SWIG_store_string(result);
  
  return fresult;
}


#ifdef __cplusplus
}
#endif

