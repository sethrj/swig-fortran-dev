/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#ifndef SWIGEXTERN
#ifdef __cplusplus
#define SWIGEXTERN extern
#else
#define SWIGEXTERN
#endif
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




// Default exception handler
#define SWIG_exception_impl(CODE, MSG, RETURNNULL) \
    throw std::logic_error(MSG); RETURNNULL;


/* Contract support */
#define SWIG_contract_assert(RETURNNULL, EXPR, MSG) \
    if (!(EXPR)) { SWIG_exception_impl(SWIG_ValueError, MSG, RETURNNULL); }


#define SWIGVERSION 0x040000 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


#include "bare.hh"


#include <utility>


struct SwigArrayWrapper
{
    void* data;
    std::size_t size;
};

SWIGINTERN SwigArrayWrapper SwigArrayWrapper_uninitialized()
{
    SwigArrayWrapper result;
    result.data = NULL;
    result.size = 0;
    return result;
}

#ifdef __cplusplus
extern "C" {
#endif
SWIGEXPORT SWIGEXTERN int const swigc_octal_const = 0777;

SWIGEXPORT SWIGEXTERN int const swigc_wrapped_const = 0xdeadbeef;

SWIGEXPORT void swigc_set_something(int const *farg1, double const *farg2) {
  int arg1 ;
  double arg2 ;
  
  arg1 = *farg1;
  arg2 = *farg2;
  set_something(arg1,arg2);
  
}


SWIGEXPORT double swigc_get_something(int const *farg1) {
  double fresult ;
  int arg1 ;
  double result;
  
  arg1 = *farg1;
  result = (double)get_something(arg1);
  fresult = result;
  return fresult;
}


SWIGEXPORT void swigc_get_something_ref(int const *farg1, double *farg2) {
  int arg1 ;
  double *arg2 = 0 ;
  
  arg1 = *farg1;
  arg2 = reinterpret_cast< double * >(farg2);
  get_something_ref(arg1,*arg2);
  
}


SWIGEXPORT void swigc_get_something_ptr(int const *farg1, double *farg2) {
  int arg1 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = *farg1;
  arg2 = reinterpret_cast< double * >(farg2);
  get_something_ptr(arg1,arg2);
  
}


SWIGEXPORT double * swigc_get_something_rptr(int const *farg1) {
  double * fresult ;
  int arg1 ;
  double *result = 0 ;
  
  arg1 = *farg1;
  result = (double *)get_something_rptr(arg1);
  fresult = reinterpret_cast< double* >(result);
  return fresult;
}


SWIGEXPORT double const * swigc_get_something_rcptr(int const *farg1) {
  double const * fresult ;
  int arg1 ;
  double *result = 0 ;
  
  arg1 = *farg1;
  result = (double *)get_something_rcptr(arg1);
  fresult = const_cast< double* >(reinterpret_cast< const double* >(result));
  return fresult;
}


SWIGEXPORT double * swigc_get_something_rref(int const *farg1) {
  double * fresult ;
  int arg1 ;
  double *result = 0 ;
  
  arg1 = *farg1;
  result = (double *) &get_something_rref(arg1);
  fresult = reinterpret_cast< double* >(result);
  return fresult;
}


SWIGEXPORT double swigc_get_something_rcref(int const *farg1) {
  double fresult ;
  int arg1 ;
  double *result = 0 ;
  
  arg1 = *farg1;
  result = (double *) &get_something_rcref(arg1);
  fresult = *result;
  return fresult;
}


SWIGEXPORT void swigc_print_array(SwigArrayWrapper *farg1) {
  std::pair< double const *,std::size_t > arg1 ;
  
  (&arg1)->first  = static_cast<const double*>(farg1->data);
  (&arg1)->second = farg1->size;
  print_array(arg1);
  
}


SWIGEXPORT int swigc_wrapped_negation(int const *farg1) {
  int fresult ;
  bool arg1 ;
  bool result;
  
  arg1 = (*farg1 ? true : false);
  result = (bool)wrapped_negation(arg1);
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT SWIGEXTERN int const swigc_RgbEnum = static_cast< int >(-1);

SWIGEXPORT SWIGEXTERN int const swigc_RED = static_cast< int >(RED);

SWIGEXPORT SWIGEXTERN int const swigc_GREEN = static_cast< int >(GREEN);

SWIGEXPORT SWIGEXTERN int const swigc_BLUE = static_cast< int >(BLUE);

SWIGEXPORT SWIGEXTERN int const swigc_CmykEnum = static_cast< int >(-1);

SWIGEXPORT SWIGEXTERN int const swigc_CYAN = static_cast< int >(CYAN);

SWIGEXPORT SWIGEXTERN int const swigc_MAGENTA = static_cast< int >(MAGENTA);

SWIGEXPORT SWIGEXTERN int const swigc_YELLOW = static_cast< int >(YELLOW);

SWIGEXPORT SWIGEXTERN int const swigc_BLACK = static_cast< int >(BLACK);

SWIGEXPORT int swigc_get_linked_const_int() {
  int fresult ;
  int result;
  
  result = (int)(int)linked_const_int;
  fresult = result;
  return fresult;
}


SWIGEXPORT int swigc_get_simple_int() {
  int fresult ;
  int result;
  
  result = (int)(int)simple_int;
  fresult = result;
  return fresult;
}


SWIGEXPORT int swigc_get_weird_int() {
  int fresult ;
  int result;
  
  result = (int)(int)weird_int;
  fresult = result;
  return fresult;
}


SWIGEXPORT double swigc_get_approx_twopi() {
  double fresult ;
  double result;
  
  result = (double)(double)approx_twopi;
  fresult = result;
  return fresult;
}


SWIGEXPORT void swigc_set_global_counter(int const *farg1) {
  int arg1 ;
  
  arg1 = *farg1;
  foo::global_counter = arg1;
  
}


SWIGEXPORT int swigc_get_global_counter() {
  int fresult ;
  int result;
  
  result = (int)foo::global_counter;
  fresult = result;
  return fresult;
}


SWIGEXPORT void swigc_print_rgb(int const *farg1) {
  RgbEnum arg1 ;
  
  arg1 = static_cast< RgbEnum >(*farg1);
  print_rgb(arg1);
  
}


SWIGEXPORT void swigc_print_cmyk(int const *farg1) {
  CmykEnum arg1 ;
  
  arg1 = static_cast< CmykEnum >(*farg1);
  print_cmyk(arg1);
  
}


#ifdef __cplusplus
}
#endif

