{
  "title": "SWIG dev notes",
  "cells": [
    {
      "type": "markdown",
      "data": "# SWIG node properties\n\nThe `%rename` directive changes the `sym:name` property\n"
    },
    {
      "type": "markdown",
      "data": "# Memory management in SWIG\n- Delete when you call \"new\"\n- Calling `SetAttr` increments the reference counter (should delete after using)\n- Calling `GetAttr` returns a reference, not a copy (don't delete)\n- Calling `Append` on a list also increments the reference counter\n- Most (all?) `Swig_*` methods that return `String*` return a new string"
    },
    {
      "type": "markdown",
      "data": "# SWIG typedef resolution\n\nPreviously I was typedefing `size_type` as `int` in the STL wrappers so that the fortran side could use native integers. However, once I changed the typemap code to use `$lname` instead of `CTYPE`, this meant that the actual typedef `vector::size_type` (rather than the resolved name `int`) was being injected into the wrapper code. So an `int*` was being implicitly used as a `size_t*` which is of course a problem if the two are different sizes.\n\nThe type actually resolved by SWIG (for parameters only, not return values!) is saved in `tmap:TYPE:match_type`. This is needed for `$fclassname` resolution because only `match_type` is aware of whether the value is truly e.g. an enum or not. "
    },
    {
      "type": "markdown",
      "data": "## Replacing special characters\n\nWe have a special function to replace `$fclassname` with the appropriate variables. This is called manually when we generate proxy and fortran wrapper code, and it's also called by `Language::replaceSpecialVariables`.\nThis in turn is only called by `Swig_replace_special_variables`, which is called by `emit_action_code`, which is called by `emit_action`.\n\nBesides the external `replaceSpecialVariables` call, \n\n`Swig_replace_special_variables"
    },
    {
      "type": "markdown",
      "data": "# Debugging memory issues\n\nUncomment `DOH_DEBUG_MEMORY_POOLS` in `Source/DOH/memory.c` to guard against double-deletion. If the assertion fails, back up in the backtrace to see where (e.g. deleting a hash). You can use `call Swig_print_node(n)` in the debugger to print it."
    },
    {
      "type": "markdown",
      "data": "# Typemaps\n\n- Failure to substitute `$*1_ltype` was that `1_ltype` was not a pointer.\n- Remove const and type safety on swigf wrapper for C compatibility \n- %apply to do crazy shit in unit tests is terrible.  \n\n# Enum hell\n\n## Problem\n\nWith all the current fixes applied, the wrapper code incorrectly adds an `enum` prefix to a typedef'd enum.\n\n## Debugging\n\n- If we revert the fix to basetype (so that the resolved typedef is not used), then anything that uses something like `$1_basetype*` fails because `basetype` isn't actually the base type.\n- Anonymous typedef'd enums are implicitly typedef'd under the hood in `TypePass::enumDeclaration`\n- If that typedef is suppressed, they're set in `TypePass::cDeclaration`\n```\nSetattr finger <- enum $unnamed1$\n+++  - 0x10f45ea80 ----------------------------------------\n| size_t       - \"std::size_t\"\n| ptrdiff_t    - \"std::ptrdiff_t\"\n```\n- If *that* typedef is suppressed as well, so that the C++ wrapper compiles, type resolution fails when evaluating the typedef'd enum:\n```\n/Users/s3j/_code/swig/Examples/test-suite/fortran/../arrays_global.i:15: Searching for a suitable 'ftype' typemap for: finger array_enum[2]\n  Looking for: finger array_enum[2]\n  Looking for: finger [2]\n  Looking for: finger array_enum[ANY]\n  Looking for: finger [ANY]\n  Looking for: SWIGTYPE array_enum[ANY]\n  Looking for: SWIGTYPE [ANY]\n  Using: %typemap(ftype) SWIGTYPE [ANY] = SWIGTYPE *\n```\nas compared to\n```\n/Users/s3j/_code/swig/Examples/test-suite/fortran/../arrays_global.i:18: Searching for a suitable 'ftype' typemap for: enum Color array_named_enum[2]\n  Looking for: enum Color array_named_enum[2]\n  Looking for: enum Color [2]\n  Looking for: enum Color array_named_enum[ANY]\n  Looking for: enum Color [ANY]\n  Looking for: enum SWIGTYPE array_named_enum[ANY]\n  Looking for: enum SWIGTYPE [ANY]\n  Using: %typemap(ftype) enum SWIGTYPE [ANY]\n```\nwhere the original is\n```\n/Users/s3j/_code/swig/Examples/test-suite/fortran/../arrays_global.i:15: Searching for a suitable 'ftype' typemap for: finger array_enum[2]\n  Looking for: finger array_enum[2]\n  Looking for: finger [2]\n  Looking for: finger array_enum[ANY]\n  Looking for: finger [ANY]\n  Looking for: enum finger array_enum[2]\n  Looking for: enum finger [2]\n  Looking for: enum finger array_enum[ANY]\n  Looking for: enum finger [ANY]\n  Looking for: SWIGTYPE array_enum[ANY]\n  Looking for: SWIGTYPE [ANY]\n  Using: %typemap(ftype) SWIGTYPE [ANY] = SWIGTYPE *\n```"
    }
  ]
}