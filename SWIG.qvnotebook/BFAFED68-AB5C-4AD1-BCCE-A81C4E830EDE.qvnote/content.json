{
  "title": "Fortran inheritance",
  "cells": [
    {
      "type": "markdown",
      "data": "# Generic procedures and overriding\n\nIt looks like procedures can't override other procedures in the base class except in very special circumstances:\n> See Fortran 2008, \"4.5.7.3 Type-bound procedure overriding\":\n> \"The overriding and overridden type-bound procedures shall satisfy the following conditions. [...] They shall have the same number of dummy arguments.\"\n\nAlso, `GENERIC` bindings cannot be overriden; instead, they always extend the base's generic methods."
    },
    {
      "type": "markdown",
      "data": "# New inheritance\n\n- Proxy class types will be COMPLETELY INDEPENDENT: shadowing and such is handled by SWIG since Fortran sucks balls\n- Write C wrapper functions only for base class methods (i.e. don't duplicate wrapper code between base and derived)\n- Add implementation (private) functions that implement casts between the C++ class pointers\n- Proxy code will use pointer casting functions \n- Add user-accessible free functions to cast between Fortran proxy classes\n\nExample:\n```c++\nclass A {\n  public:\n    virtual ~A();\n    virtual void foo() = 0;\n    void bar();\n    void bar(int a);\n};\n\nclass B : public A {\n  public:\n    B();\n    void foo();\n    void bar(double c);\n    void baz();\n};\n```\n\nFortran proxy code:\n```fortran\nfunction derived_to_base(derived) &\n    result(base)\n    use, intrinsic :: ISO_C_BINDING\n    type(A) :: base\n    class(B) :: derived\n    type(C_PTR) :: fresult \n    type(C_PTR) :: farg1 \n\n    farg1 = derived%swigptr\n    fresult = swigc_derived_to_base(farg1)\n    base%swigptr = fresult\nend function\n```"
    },
    {
      "type": "markdown",
      "data": ""
    },
    {
      "type": "markdown",
      "data": "# Fortran abstract classes and such\n\nFrom [Stack Overflow](https://stackoverflow.com/questions/25410476/understanding-fortran-extends-types-and-override):\n\nthe base class defines an abstract function `allocateBasis` that accepts a real value; the subclass defines an implementation as well as an overload that takes a complex value."
    },
    {
      "type": "code",
      "language": "fortran",
      "data": "module basis_module\n  implicit none\n\n  type, abstract :: Basis\n    integer :: NBasis\n  contains\n    procedure(allocBasisR1Interface), deferred :: allocateBasisR1\n    generic :: allocateBasis => allocateBasisR1\n  end type Basis\n\n  interface \n    ! Interface for real basis allocation\n    subroutine allocBasisR1Interface(self, array)\n      import\n      class(Basis), intent(inout) :: self\n      real, intent(in) :: array(:)\n    end subroutine allocBasisR1Interface\n  end interface\n\nend module basis_module\n\n\nmodule extension_module\n  use basis_module\n  implicit none\n\n  type, extends(Basis) :: GridBasis\n  contains\n    ! Extending the mapping allocateBasis => allocateBasisR1 of\n    ! the parent type.\n    generic :: allocateBasis => allocateBasisC1\n    procedure :: allocateBasisC1\n    ! Implementation for the deferred procedure in Basis\n    procedure :: allocateBasisR1\n  end type GridBasis\n\ncontains\n\n  subroutine allocateBasisR1(self, array)\n    class(GridBasis), intent(inout) :: self\n    real, intent(in) :: array(:)\n\n    self%NBasis = size(array)\n    print *, \"GridBasis:allocateBasisR1\"\n\n  end subroutine allocateBasisR1\n\n\n  subroutine allocateBasisC1(self, array)\n    class(GridBasis), intent(inout) :: self\n    complex, intent(in) :: array(:)\n\n    self%NBasis = size(array)\n    print *, \"GridBasis:allocateBasisC1\"\n\n  end subroutine allocateBasisC1\n\nend module extension_module\n\n\nprogram test\n  use extension_module\n  implicit none\n\n  type(GridBasis) :: mybasis\n  real :: myRealArray(10)\n  complex :: myComplexArray(5)\n\n  call mybasis%allocateBasis(myRealArray)\n  call mybasis%allocateBasis(myComplexArray)\n\nend program test\n"
    },
    {
      "type": "markdown",
      "data": "SWIG sets the `abstract` property on the function `meth`. Currently it outputs:\n```fortran  \n  procedure :: meth => swigf_abstract_foo_meth\n```\nand defines a function `swigf_abstract_foo_meth`\nbut instead should write an interface:\n```\nprocedure(swigf_abstract_foo_meth_interface), deferred :: swigf_abstract_foo_meth\ngeneric :: meth => swigf_abstract_foo_meth\n```\n- Don't write `swigc_abstract_foo_meth`?\n"
    },
    {
      "type": "markdown",
      "data": "[Fortran deferred bindings](https://www.ibm.com/support/knowledgecenter/SSGH4D_14.1.0/com.ibm.xlf141.aix.doc/language_ref/abstracttypes.html)"
    }
  ]
}