{
  "title": "Vector views and fortran pointers",
  "cells": [
    {
      "type": "markdown",
      "data": "# SWIG development\nNemesis view field: specialize `View_Field<const T>`; template both `const` and non-`const`.\n\n## Errors\nWhen only declaring the template:\n```c++\n%template() VectorView<const double>;\n%template(VecViewDbl) VectorView<double>;\n```\nget output like:\n```\n/Users/s3j/_code/swig/Examples/fortran/std_vector/stdvec.i:24: Warning 761: No '$fclassname' replacement (wrapped type) found for VectorView<(q(const).double)> (VectorView< double const >)\n```\nmay be related to [Shared pointer bugÂ ](quiver-note-url/ECD23992-5D3B-4BD5-B9C7-208FA1F6095E)\n\n----\n\nWhen `print_view` is only defined for const vector view:\n```\n/Users/s3j/_code/swig/Examples/fortran/std_vector/test.f90:42:20:\n\n     call print_view(view)\n                    1\nError: Type mismatch in argument 'view' at (1); passed TYPE(vecviewdbl) to TYPE(const_vecviewdbl)\n```\n-----\n\nTaking the `C_LOC` of a return value fails: given the SWIG code\n```fortran\n  function $fclassname_view(self) &\n     result(fresult)\n   use, intrinsic :: ISO_C_BINDING\n   real(C_DOUBLE), pointer :: fresult(:)\n   real(C_DOUBLE), pointer :: temp\n   class($fclassname) :: self\n   !call c_f_pointer(c_loc(self%data()), fresult, [self%size()])\n   write(*,*) \"Data: \", swigc_VecViewDbl_data(self%swigptr)\n   temp => self%data()\n   write(*,*) \"Cloc of data: \", c_loc(temp)\n   write(*,*) \"Cloc of function call: \", c_loc(self%data())\n   call c_f_pointer(c_loc(temp), fresult, [self%size()])\n  end function\n```\nwe get\n```\n Data:       140692715208880\n Cloc of data:       140692715208880\n Cloc of function call:       140734710177560\n```"
    },
    {
      "type": "markdown",
      "data": ""
    },
    {
      "type": "markdown",
      "data": "# Fortran usage\nGetting function ponters form Fortran: interface is\n```fortran\n  function swigc_Matrix_get_columns(farg1, farg2) &\n     bind(C, name=\"swigc_Matrix_get_columns\") &\n     result(fresult)\n   use, intrinsic :: ISO_C_BINDING\n   type(C_PTR) :: fresult\n   type(C_PTR), value :: farg1\n   integer(C_INT), intent(in) :: farg2\n  end function\n```\nand wrapper is\n```fortran\n  function swigf_Matrix_get_columns(self, row) &\n     result(fresult)\n   use, intrinsic :: ISO_C_BINDING\n   integer(C_INT), pointer :: fresult(:)\n   class(Matrix) :: self\n   integer(C_INT), intent(in) :: row\n   call c_f_pointer(swigc_Matrix_get_columns(self%swigptr, row), fresult, [swigf_Matrix_row_nnz(self,row)])\n  end function\n```\nthen use with\n```fortran\n  integer(c_int), pointer :: cols(:)\n  cols => A%get_columns(i-1)\n```\n\nnote that this is different from the regular pointer:\n```fortran\n  integer(c_int), pointer :: ptr\n```\n\nInverse of `C_F_POINTER`: [C_LOC](https://software.intel.com/en-us/node/679093)"
    },
    {
      "type": "markdown",
      "data": ""
    }
  ]
}