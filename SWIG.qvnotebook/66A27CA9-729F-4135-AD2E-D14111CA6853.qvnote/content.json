{
  "title": "Fortran C binding structs",
  "cells": [
    {
      "type": "markdown",
      "data": "See [issue 11](https://github.com/sethrj/swig/issues/11)"
    },
    {
      "type": "markdown",
      "data": "- How do we know what's C-compatible by default?\n- Provide `%feature` directive to override (like with the `valuewrapper` and `novaluewrapper` features)\n- Usually classes are proxy functions with stored C pointers, and the generic `SWIGTYPE` uses that. However, how do we identify what wrapped types are structs and how to access them by directly passing their type through to C++? Is it possible to use a `%feature` directive, like with shared pointers?"
    },
    {
      "type": "markdown",
      "data": "Trivial constructor, standard layout => POD\n[descriptions](https://msdn.microsoft.com/en-us/library/mt767760.aspx)\n\nTaking the example code:\n```c++\nstruct BasicStruct\n{\n    int foo;\n    double bar;\n};\n\nstruct DerivedStruct : BasicStruct\n{\n    int vald;\n    double bard;\n};\n\nstruct AbstractStruct\n{\n    int foo;\n    double bar;\n    virtual void do_nothing() = 0;\n};\n\nstruct PrivateStruct\n{\n    int foo;\n  private:\n    double bar;\n};\n\nstruct NontrivialStruct\n{\n    int foo;\n    double bar;\n    NontrivialStruct(int i);\n};\n```\n\nand copying the output using `print_pynode`:\n```py\nitems = {k: set(v) for k,v in classes.items()}\nbasic = items.pop('BasicStruct')\nfor k,v in items.items():\n    print(k, \" has:\", \",\".join(sorted(v - basic)))\n    print(k, \" is missing:\", \",\".join(sorted(basic - v)))\n```\nyields\n```\nPrivateStruct  has: previousSibling\nPrivateStruct  is missing: \nAbstractStruct  has: abstracts,previousSibling\nAbstractStruct  is missing: has_default_constructor\nDerivedStruct  has: allbases,baselist,bases,previousSibling,privatebaselist,protectedbaselist\nDerivedStruct  is missing: \nNontrivialStruct  has: allocate:has_constructor,allocate:public_constructor,previousSibling\nNontrivialStruct  is missing: allocate:default_constructor,has_default_constructor,nextSibling\n```\n\nThus it should be easy to give default struct accessibility for everything but types with private data."
    },
    {
      "type": "markdown",
      "data": "# Typemap\n\nFor each struct we make, we need to add a custom typemap for that struct (kind of like with the `%shared_ptr` thing) that knows to pass by pointer instead of accessing the `swigptr` variable.\n\nSo maybe don't make it automatic? Or use `Swig_typemap_register`?\n\nOR define a \"struct\" typemap and call `Swig_typemap_apply` to copy it to the given type!!"
    },
    {
      "type": "markdown",
      "data": "# Current implementation\n\nFor now I'm manually defining a macro to bind C structs. There are a couple issues with wrapping C routines though.\n\nFirst, it looks like the `SWIGTYPE*` typemap is overriding the `%apply CPPTYPE& { CPPTYPE*, CPPTYPE[], CPPTYPE[ANY] };` directive, causing `class($fclassname)` to be inserted instead of `type($fclassname)`.\n\nSecond, there's still an outstanding issue of how to set all the C pointers in the structs: some of them are e.g. arrays of objects. Do we provide a helper function to get/set those? And since there's no type safety for the fortran equivalents of these functions, how could it possibly be safe?\n\nAlong the same lines, what about things like `type(C_PTR), public :: title`? That would require a helper function that returns a compatible C-string. So we'd end up having a bunch of free functions without any type safety. Ugh."
    },
    {
      "type": "markdown",
      "data": ""
    }
  ]
}