{
  "title": "SWIG memory management refactor",
  "cells": [
    {
      "type": "markdown",
      "data": "- Instead of using raw `C_PTR` , add a new struct that also contains ownership information.\n  - Should the ownership be a bool, enum, ... ?\n  - Use cases:\n    - Return by reference (no ownership)\n    - Return by value\n    - Shared pointer??\n  - Fortran use:\n    - Assignment: `a = b`\n    - Capture from function return: `a = make_foo()`\n\nWhat about: add an integer flag to the class to indicate memory ownership and pending volatility. Three states:\n- Reference\n- Own\n- Moving (implies Own).\n\nNope, won't work because:\n```fortran\n    orig = emit_class(1)\n    write(0, *) \"ref = orig\"\n    ref  = orig\n    write(0, *) \"ref2 = orig\"\n    ref2 = orig\n```\nwill never have a chance to change `orig`.\n\nThe only reasonable solution is to use shared pointers as is done by Rousson in the original fortrilinos.\n\n## Shared pointer requirements\n\n- Non-owning reference (null destructor) must be allowed for return-by-reference\n- Every Fortran proxy class instance has a unique shared pointer instance \n- Increment referenced object on `assignment(=)` (then assign a new shared pointer instance) \n- ??? Allow use of user-specific shared pointer? so that e.g. `std::shared_ptr` and `Teuchos::RCP`  can be used directly without having a shared pointer to a shared pointer to a class\n- ??? Store type information along with class pointer?\n\n## Implementation changes\n\n- Add small SP class to SWIG wrapper\n- All classes get assignment generic:\n  ```fortran\n    procedure, private :: assign_simpleclass_impl\n    generic :: assignment(=) => assign_simpleclass_impl\n  ```\n  which is the SP copy constructor\n- Typemaps for C++ in/out change to dereference the sp\n- All return values for classes \"new\" an SP"
    },
    {
      "type": "markdown",
      "data": "# Oh crap it doesn't work\n\nA simple test of a shared pointer returned by a function reveals the issue. Given the code:\n```fortran\n    use spdemo, only : Foo, printfoo => print_crsp, use_count\n    implicit none\n    type(Foo) :: f1, f2\n\n    call f1%create(1.0d0)\n    write(0, *) \"Cloning...\"\n\n    f2 = f1%clone()\n    call f2%set(2.0d0)\n\n    write(0, *) \"Use count should be 1, val 1:\", use_count(f1), f1%get()\n    call printfoo(f1)\n    write(0, *) \"Use count should be 1, val 2:\", use_count(f2), f2%get()\n    call printfoo(f2)\n    write(0, *) \"-- END SUBROUTINE --\"\n```\nand with debug code in the clone and assign subroutines, we get:\n```\nInitialized Foo at 0x7fdee1403660\n Cloning...\n Cloned from...\nShared pointer cref at 0x7fdee1403670 with reference count 1: 0x7fdee1403660\nCopied      Foo at 0x7fdee14036a0 from 0x7fdee1403660\n ...to...\nShared pointer cref at 0x7fdee14036d0 with reference count 1: 0x7fdee14036a0\n assigning from...\nShared pointer cref at 0x7fdee14036d0 with reference count 1: 0x7fdee14036a0\n ...to what used to be...\nShared pointer cref at 0x7fff50ba6e20 with reference count 0: 0\n ...but is now...\nShared pointer cref at 0x7fdee14036d0 with reference count 2: 0x7fdee14036a0\n Use count should be 1, val 1:           1   1.0000000000000000\nShared pointer cref at 0x7fdee1403670 with reference count 1: 0x7fdee1403660\n Use count should be 1, val 2:           2   2.0000000000000000\nShared pointer cref at 0x7fdee14036e0 with reference count 2: 0x7fdee14036a0\n -- END SUBROUTINE --\n ```\n At the end, it turns out the assignment from `f1%clone()` to `f2` leaks memory. At the end of `clone()`, the use count of the pointer is 1 and assigned to `result`. Then `operator=` comes along, clones *that* shared pointer (which really should be a 'move' operation) into `f2`.\n \n Maybe the solution is to use some sort of intermediate generic for function return values? Then you'd lose type safety."
    },
    {
      "type": "text",
      "data": "<p>Shared pointer semantics (in the case where it's presumed that the \"final\" keyword isn't used) are broken by Fortran's apparent lack of copy elision (return value optimization) with typed classes. See:</p><p><a href=\"/Users/s3j/_code/swig/Examples/fortran/spdemo/test-copy-elision.f90\">test-copy-elision.f90</a></p>\n"
    },
    {
      "type": "markdown",
      "data": "Trying to use the `final` keyword fails in gcc 5; because it seems that even though there's a default set for `swigptr = C_NULL_PTR`, it starts out non-null. >:( "
    }
  ]
}